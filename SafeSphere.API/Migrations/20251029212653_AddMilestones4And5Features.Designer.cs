// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SafeSphere.API.Data;

#nullable disable

namespace SafeSphere.API.Migrations
{
    [DbContext(typeof(SafeSphereDbContext))]
    [Migration("20251029212653_AddMilestones4And5Features")]
    partial class AddMilestones4And5Features
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SafeSphere.API.Models.DisasterAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedArea")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double?>("AffectedRadiusKm")
                        .HasColumnType("double precision");

                    b.Property<int>("ConfirmationCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DisasterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmergencyContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalAlertId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("SafetyInstructions")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Moderate");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAlertId");

                    b.ToTable("DisasterAlerts");
                });

            modelBuilder.Entity("SafeSphere.API.Models.PanicAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("LocationLat")
                        .HasColumnType("double precision");

                    b.Property<double>("LocationLng")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Active");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PanicAlerts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalInfo = "False alarm",
                            LocationLat = 40.712800000000001,
                            LocationLng = -74.006,
                            Status = "Resolved",
                            Timestamp = new DateTime(2025, 10, 29, 19, 26, 51, 836, DateTimeKind.Utc).AddTicks(1003),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdditionalInfo = "Need help",
                            LocationLat = 34.052199999999999,
                            LocationLng = -118.2437,
                            Status = "Active",
                            Timestamp = new DateTime(2025, 10, 29, 20, 56, 51, 836, DateTimeKind.Utc).AddTicks(1025),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SafeSphere.API.Models.SOSAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Acknowledged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double?>("LocationLat")
                        .HasColumnType("double precision");

                    b.Property<double?>("LocationLng")
                        .HasColumnType("double precision");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SOSAlerts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acknowledged = true,
                            AcknowledgedAt = new DateTime(2025, 10, 29, 20, 41, 51, 836, DateTimeKind.Utc).AddTicks(1165),
                            Location = "Highway 101, San Francisco",
                            LocationLat = 37.774900000000002,
                            LocationLng = -122.4194,
                            Message = "Car accident on Highway 101",
                            Timestamp = new DateTime(2025, 10, 29, 20, 26, 51, 836, DateTimeKind.Utc).AddTicks(1136),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Acknowledged = false,
                            Location = "Downtown, Los Angeles",
                            LocationLat = 34.052199999999999,
                            LocationLng = -118.2437,
                            Message = "Feeling unsafe, please check on me",
                            Timestamp = new DateTime(2025, 10, 29, 21, 11, 51, 836, DateTimeKind.Utc).AddTicks(1178),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SafeSphere.API.Models.SafeRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("DestinationLat")
                        .HasColumnType("double precision");

                    b.Property<double>("DestinationLng")
                        .HasColumnType("double precision");

                    b.Property<double>("DistanceMeters")
                        .HasColumnType("double precision");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double>("OriginLat")
                        .HasColumnType("double precision");

                    b.Property<double>("OriginLng")
                        .HasColumnType("double precision");

                    b.Property<string>("RouteCoordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SafetyScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<int>("UnsafeZonesAvoided")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SafeRoutes");
                });

            modelBuilder.Entity("SafeSphere.API.Models.UnsafeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double>("CenterLat")
                        .HasColumnType("double precision");

                    b.Property<double>("CenterLng")
                        .HasColumnType("double precision");

                    b.Property<int>("ConfirmationCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("RadiusMeters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(500.0);

                    b.Property<int?>("ReportedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Medium");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("ThreatType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Other");

                    b.HasKey("Id");

                    b.ToTable("UnsafeZones");
                });

            modelBuilder.Entity("SafeSphere.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmergencyContacts")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 29, 21, 26, 51, 408, DateTimeKind.Utc).AddTicks(8958),
                            Email = "john.doe@example.com",
                            EmergencyContacts = "Jane Doe:+1234567891,Police:911",
                            Name = "John Doe",
                            PasswordHash = "$2a$11$SqLdekSJsTJjB91nH4Vd0eHROJlnBAT.TsAxupiuW6hSJpSgSVa02",
                            Phone = "+1234567890"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 29, 21, 26, 51, 835, DateTimeKind.Utc).AddTicks(9703),
                            Email = "jane.smith@example.com",
                            EmergencyContacts = "John Smith:+1234567893,Emergency:911",
                            Name = "Jane Smith",
                            PasswordHash = "$2a$11$TwNSvE6cB2i3.UVuGMnArOQMR4yFrmaNsQ0hLa4xSAUdRVcWhyA9y",
                            Phone = "+1234567892"
                        });
                });

            modelBuilder.Entity("SafeSphere.API.Models.WeatherAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DataSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalAlertId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Info");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("WeatherCondition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAlertId");

                    b.ToTable("WeatherAlerts");
                });

            modelBuilder.Entity("SafeSphere.API.Models.PanicAlert", b =>
                {
                    b.HasOne("SafeSphere.API.Models.User", "User")
                        .WithMany("PanicAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SafeSphere.API.Models.SOSAlert", b =>
                {
                    b.HasOne("SafeSphere.API.Models.User", "User")
                        .WithMany("SOSAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SafeSphere.API.Models.SafeRoute", b =>
                {
                    b.HasOne("SafeSphere.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SafeSphere.API.Models.User", b =>
                {
                    b.Navigation("PanicAlerts");

                    b.Navigation("SOSAlerts");
                });
#pragma warning restore 612, 618
        }
    }
}
